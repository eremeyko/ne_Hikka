# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Original repository: https://github.com/eremeyko/ne_Hikka
#
# ¬©Ô∏è Dan Gazizullin, 2021-2024
# This file is a part of Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# üîë https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @eremod

from .. import loader, utils
from random import sample, choice, shuffle
from string import digits, ascii_letters, punctuation

@loader.tds
class PassGen(loader.Module):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª–∏. –î–∞."""
    strings = {
        'name': 'PassGenerator',
        'error5': "<emoji document_id=5843952899184398024>üö´</emoji> <b>–í–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 –∑–Ω–∞–∫–æ–≤!</b>",
        'error2000': "<emoji document_id=5843952899184398024>üö´</emoji> <b>–í–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 2000 –∑–Ω–∞–∫–æ–≤!</b>"
    }

    def __init__(self):
        self.length = 0

        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "digits",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –ø–∞—Ä–æ–ª–µ?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "ascii_letters",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã –≤ –ø–∞—Ä–æ–ª–µ?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "punctuation",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ?",
                validator=loader.validators.Boolean(),
            )
            )

    @loader.command()
    async def pgen(self, message) -> None:
        """–¥–ª–∏–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: .pgen 7"""
        error:str = "\n\n"
        all_chars:str = ""
        pass_char: list = []

        args = utils.get_args(message)
        if not args:
            self.length = 7
        else:
            self.length = int(args[0])

            if self.length < 5 and self.length < 2000:
                self.length = 5
                error += self.strings["error5"]
            elif self.length > 2000 and self.length > 5:
                self.length = 2000
                error += self.strings["error2000"]

        if self.config["digits"]:
            pass_char.append(choice(digits))
            all_chars += digits
        if self.config["ascii_letters"]:
            pass_char.append(choice(ascii_letters))
            all_chars += ascii_letters
        if self.config["punctuation"]:
            pass_char.append(choice(punctuation))
            all_chars += punctuation
        if not pass_char:
            return await message.edit(("<b>–ò –∏–∑ —á–µ–≥–æ —è —Ç–µ–±–µ –¥–æ–ª–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ª–µ–ø–∏—Ç—å, —É–º–Ω–∏–∫?</b><emoji document_id=5472152561215618810>ü§ì</emoji>\n\n"
                                       "–û—Ç–∫—Ä—ã–≤–∞–π <code>.cfg PassGen</code> –∏ –≤–∫–ª—é—á–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ"
                                    ))

        while len(pass_char) < self.length:
            pass_char += sample(all_chars, min(self.length - len(pass_char), len(all_chars)))

        shuffle(pass_char)
        password = ''.join(pass_char)

        return await message.edit("–í–∞—à –ø–∞—Ä–æ–ª—å: <code>{}</code>{}".format(password, error))
